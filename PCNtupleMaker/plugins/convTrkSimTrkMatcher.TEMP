// -*- C++ -*-
//
// Package:    MaterialStudy/PCNtupleMaker
// Class:      convTrkSimTrkMatcher
// 
/**\class convTrkSimTrkMatcher convTrkSimTrkMatcher.cc MaterialStudy/PCNtupleMaker/plugins/convTrkSimTrkMatcher.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  Justin Anguiano
//         Created:  Thu, 23 Apr 2020 20:14:08 GMT
//
//


// system include files
#include <memory>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
//#include "FWCore/Framework/interface/stream/EDProducer.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/Utilities/interface/StreamID.h"


#include "DataFormats/EgammaCandidates/interface/Conversion.h"
#include "DataFormats/TrackReco/interface/TrackBase.h"
#include "DataFormats/TrackReco/interface/Track.h"
#include "DataFormats/TrackReco/interface/TrackFwd.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "SimDataFormats/Track/interface/SimTrack.h"
//
// class declaration
//

//class convTrkSimTrkMatcher : public edm::stream::EDProducer<> {
class convTrkSimTrkMatcher : public edm::EDProducer {
   public:
      explicit convTrkSimTrkMatcher(const edm::ParameterSet&);
      ~convTrkSimTrkMatcher();

     // static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:

     ///test remove 
     /*
      virtual void beginStream(edm::StreamID) override;
      virtual void produce(edm::Event&, const edm::EventSetup&) override;
      virtual void endStream() override;
     */

      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;

      //virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
      //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
      //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;

      // ----------member data ---------------------------
      const edm::EDGetTokenT<edm::View<reco::Conversion>> convs_;
      const edm::EDGetTokenT<edm::View<SimTrack>> simtrks_;
      int trkCandIdx_;    

       
	
};

//
// constants, enums and typedefs
//


//
// static data member definitions
//

//
// constructors and destructor
//
convTrkSimTrkMatcher::convTrkSimTrkMatcher(const edm::ParameterSet& iConfig): convs_(consumes<edm::View<reco::Conversion>>(iConfig.getParameter<edm::InputTag>("src"))),
trkCandIdx_(iConfig.getParameter<int>("trkCandIdx")), simtrks_(consumes<edm::View<SimTrack>>(iConfig.getParameter<edm::InputTag("simsrc"))) 
{
   //register your products
/* Examples
   produces<ExampleData2>();

   //if do put with a label
   produces<ExampleData2>("label");
 
   //if you want to put into the Run
   produces<ExampleData2,InRun>();
*/
//  produces<std::vector<edm::RefToBase<reco::Track>>>("convTrks");
 //  produces<std::vector<reco::Track>>("convTrks");
    produces<std::vector<int>>("convTrkIdx");
   //now do what ever other initialization is needed
  
}


convTrkSimTrkMatcher::~convTrkSimTrkMatcher()
{
 
   // do anything here that needs to be done at destruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
convTrkSimTrkMatcher::produce(edm::Event& iEvent, const edm::EventSetup& iSetup)
{
   using namespace edm;
/* This is an event example
   //Read 'ExampleData' from the Event
   Handle<ExampleData> pIn;
   iEvent.getByLabel("example",pIn);

   //Use the ExampleData to create an ExampleData2 which 
   // is put into the Event
   iEvent.put(std::make_unique<ExampleData2>(*pIn));
*/

/* this is an EventSetup example
   //Read SetupData from the SetupRecord in the EventSetup
   ESHandle<SetupData> pSetup;
   iSetup.get<SetupRecord>().get(pSetup);
*/
  Handle<View<reco::Conversion> > convs;
  iEvent.getByToken(convs_, convs);

  Handle<View<SimTrack> > simtrks;
  iEvent.getByToken(simtrks_, simtrks);
 // std::cout<<"entered produce"<<std::endl;

  //LogDebug("Trace") >>"entered produce";
  //LogDebug("Values") >>"MyOtherStuff vector has size">>otherStuffs->size();
  //LogDebug("Trace") >>"exiting produce";
  
  ///edm::RefToBase<reco::Track> cTrack;
  reco::Track cTrack;
  
  //std::vector<reco::Track> tracks;
  //std::unique_ptr<std::vector<edm::RefToBase<reco::Track>> > tracks( new std::vector<edm::RefToBase<reco::Track>> );
  std::unique_ptr<std::vector<reco::Track>> tracks( new std::vector<reco::Track> );

  View<reco::Conversion>::const_iterator conv, endconvs=convs->end();
  //View<reco::Track>::const_iterator trk;
int i=0; 
  for (conv = convs->begin(); conv != endconvs; ++conv){
	
	conv->tracks();
//	for( trk = conv->tracks()->begin(); trk != conv->Tracks()->end(); ++trk){
	//cTrack = convs->tracks()[trkCandIdx_];	
	tracks->push_back(cTrack);
	if(i==0) std::cout<<cTrack.pt()<<" "<<conv->EoverP()<<std::endl;
	i++;

//	}

  }
  iEvent.put(std::move(tracks),"convTrks"); 




}

// ------------ method called once each stream before processing any runs, lumis or events  ------------
void
//convTrkSimTrkMatcher::beginStream(edm::StreamID)
convTrkSimTrkMatcher::beginJob()
{
}

// ------------ method called once each stream after processing all runs, lumis and events  ------------
void
//convTrkSimTrkMatcher::endStream() {
convTrkSimTrkMatcher::endJob()
{
}

// ------------ method called when starting to processes a run  ------------
/*
void
convTrkSimTrkMatcher::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/
 
// ------------ method called when ending the processing of a run  ------------
/*
void
convTrkSimTrkMatcher::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/
 
// ------------ method called when starting to processes a luminosity block  ------------
/*
void
convTrkSimTrkMatcher::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/
 
// ------------ method called when ending the processing of a luminosity block  ------------
/*
void
convTrkSimTrkMatcher::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/
 
// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
/*void
convTrkSimTrkMatcher::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}
*/
//define this as a plug-in
DEFINE_FWK_MODULE(convTrkSimTrkMatcher);
